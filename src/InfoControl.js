// InfoControl.js
export class InfoControl {
  /**
   * @param {Object} options
   * @param {string} [options.title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞
   * @param {string} [options.text] - –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç / –ø–æ–¥—Å–∫–∞–∑–∫–∏
   * @param {boolean} [options.collapsed=true] - –°–≤—ë—Ä–Ω—É—Ç–∞ –ª–∏ –ø–∞–Ω–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  constructor(options = {}) {
    this.title = options.title || "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è";
    this.info = options.info || "";
    this.text =
      options.text ||
      `
        <ul style="margin:0; padding-left:18px;">
          <li>üñ±Ô∏è –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ‚Äî –õ–ö–ú</li>
          <li>üîç –ú–∞—Å—à—Ç–∞–± ‚Äî –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –∏–ª–∏ + / -</li>
          <li>‚Üª –ü–æ–≤–æ—Ä–æ—Ç ‚Äî –ü–ö–ú</li>
          <li>‚õ∞Ô∏è –ù–∞–∫–ª–æ–Ω ‚Äî Ctrl + –õ–ö–ú</li>
        </ul>
        `;
    this.collapsed = options.collapsed || true;
  }

  onAdd(map) {
    this._map = map;

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–∞
    this._container = document.createElement("div");
    this._container.className = "maplibregl-ctrl custom-info-control";
    this._container.style.position = "relative";

    // –ö–Ω–æ–ø–∫–∞ "i"
    this._button = document.createElement("button");
    // this._button.innerText = "‚ÑπÔ∏è";
    this._button.innerText = "i";
    this._button.title = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è";
    this._button.className = "info-button";
    Object.assign(this._button.style, {
      background: "rgba(0,0,0,0.6)",
      color: "white",
      border: "none",
      borderRadius: "50%",
      width: "32px",
      height: "32px",
      cursor: "pointer",
      fontSize: "18px",
      lineHeight: "32px",
      textAlign: "center",
      margin: "8px",
      transition: "background 0.3s",
    });

    this._button.onmouseenter = () =>
      (this._button.style.background = "rgba(0,0,0,0.8)");
    this._button.onmouseleave = () =>
      (this._button.style.background = "rgba(0,0,0,0.6)");

    // –ü–∞–Ω–µ–ª—å —Å —Ç–µ–∫—Å—Ç–æ–º
    this._panel = document.createElement("div");
    this._panel.className = "info-panel";
    Object.assign(this._panel.style, {
      background: "rgba(0, 0, 0, 0.7)",
      "text-align": "justify",
      color: "#fff",
      padding: "10px 12px",
      borderRadius: "8px",
      fontSize: "13px",
      lineHeight: "1.4",
      margin: "8px",
      maxWidth: "300px",
      backdropFilter: "blur(4px)",
      boxShadow: "0 2px 6px rgba(0,0,0,0.3)",
      transition: "max-height 0.4s ease, opacity 0.3s ease",
      overflow: "hidden",
    });

    this._panel.innerHTML = `
    ${this.info}<br/>    
    <strong style="display:block; margin-bottom:4px;">${this.title}</strong>
        ${this.text}
      `;

    // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞, –µ—Å–ª–∏ collapsed=true
    if (this.collapsed) {
      this._panel.style.maxHeight = "0";
      this._panel.style.opacity = "0";
      this._panel.style.padding = "0 12px";
      this._panel.style.pointerEvents = "none";
    }

    // –ü—Ä–∏ –∫–ª–∏–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this._button.addEventListener("click", () => this.togglePanel());

    this._container.appendChild(this._button);
    this._container.appendChild(this._panel);

    return this._container;
  }

  togglePanel() {
    const collapsed =
      this._panel.style.maxHeight === "0px" ||
      this._panel.style.maxHeight === "0";
    if (collapsed) {
      this._panel.style.maxHeight = "320px";
      this._panel.style.opacity = "1";
      this._panel.style.padding = "10px 12px";
      this._panel.style.pointerEvents = "auto";
    } else {
      this._panel.style.maxHeight = "0";
      this._panel.style.opacity = "0";
      this._panel.style.padding = "0 12px";
      this._panel.style.pointerEvents = "none";
    }
  }

  onRemove() {
    this._container.remove();
    this._map = undefined;
  }
}
